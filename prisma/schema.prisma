// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  username          String?
  password          String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ViolationEntry {
  id              String           @id @default(cuid())
  recieptNumber   String?
  violationNumber String?
  unit            String?
  officerName     String?
  serviceNumber   String?
  rank            String?
  date            String?
  placeOViolation String?
  comment         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime         @updatedAt
  violationCar    ViolationCar?
  violationPerson ViolationPerson?
  violationTicket ViolationTicket?
}

model ViolationCar {
  id                String         @id @default(cuid())
  plateNumber       String?
  lineOfWork        String?
  design            String?
  manufacturer      String?
  model             String?
  color             String?
  countryOfOrigin   String?
  yearOfManufacture String?
  chassisNumber     String?
  engineNumber      String?
  violationEntry    ViolationEntry @relation(fields: [violationEntryId], references: [id], onDelete: Cascade)
  violationEntryId  String         @unique
}

model ViolationPerson {
  id                  String         @id @default(cuid())
  typeOfOwner         String?
  sectorOfOwner       String?
  nameOfOwner         String?
  nameOfDriver        String?
  licenseNumber       String?
  typeOfLicense       String?
  placeOfissue        String?
  nameOnDriverLicense String?
  violationEntry      ViolationEntry @relation(fields: [violationEntryId], references: [id], onDelete: Cascade)
  violationEntryId    String         @unique
}

model ViolationTicket {
  id                   String         @id @default(cuid())
  typeOfArticle        String?
  numberOfArticle      String?
  descriptionOfArticle String?
  amountToBeFined      String?
  violationEntry       ViolationEntry @relation(fields: [violationEntryId], references: [id], onDelete: Cascade)
  violationEntryId     String         @unique
}
