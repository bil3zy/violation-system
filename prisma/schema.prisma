generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  username          String?
  password          String?
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Example {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Layout {
  id             String    @id
  userId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  pageHeading    String
  color          String
  phone          String
  email          String
  location       String
  aboutUs        String
  services       String
  latCoordinates String?
  lngCoordinates String?

  @@index([userId])
}

model Posts {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
  title     String?
  body      String?
  userId    String

  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime

  @@index([userId])
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ViolationsExample {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model ViolationsAccount {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  username          String?
  password          String?
  id_token          String? // @db.Text
  session_state     String?
  user              ViolationsUser    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ViolationsSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         ViolationsUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ViolationsUser {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      ViolationsAccount[]
  sessions      ViolationsSession[]
}

model ViolationsVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ViolationsEntry {
  id              String           @id @default(cuid())
  recieptNumber   String?
  violationNumber String?
  unit            String?
  officerName     String?
  serviceNumber   String?
  rank            String?
  date            String?
  placeOViolation String?
  comment         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  violationCar    ViolationsCar?
  violationPerson ViolationsPerson?
  violationTicket ViolationsTicket?
}

model ViolationsCar {
  id                String         @id @default(cuid())
  plateNumber       String?
  lineOfWork        String?
  design            String?
  manufacturer      String?
  model             String?
  color             String?
  countryOfOrigin   String?
  yearOfManufacture String?
  chassisNumber     String?
  engineNumber      String?
  violationsEntry    ViolationsEntry @relation(fields: [violationsEntryId], references: [id], onDelete: Cascade)
  violationsEntryId  String         @unique
}

model ViolationsPerson {
  id                  String         @id @default(cuid())
  typeOfOwner         String?
  sectorOfOwner       String?
  nameOfOwner         String?
  nameOfDriver        String?
  licenseNumber       String?
  typeOfLicense       String?
  placeOfissue        String?
  nameOnDriverLicense String?
  violationsEntry      ViolationsEntry @relation(fields: [violationsEntryId], references: [id], onDelete: Cascade)
  violationsEntryId    String         @unique
}

model ViolationsTicket {
  id                   String         @id @default(cuid())
  typeOfArticle        String?
  numberOfArticle      String?
  descriptionOfArticle String?
  amountToBeFined      String?
  violationsEntry       ViolationsEntry @relation(fields: [violationsEntryId], references: [id], onDelete: Cascade)
  violationsEntryId     String         @unique
}

